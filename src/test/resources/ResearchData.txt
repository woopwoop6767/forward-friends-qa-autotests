
================================================= –î–µ–π—Å—Ç–≤–∏–µ —Å Selenide-—ç–ª–µ–º–µ–Ω—Ç–æ–º —Å —á–µ—Ä–µ–∑ action() ============================================
elGoToItemCardButton.shouldBe(Condition.visible);
actions().moveToElement(elGoToItemCardButton).click().perform();


============================= –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ –≤–µ–±-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ stream() —Å –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º ==================================

    @Step("")
    public MainPageNewOrder elsCollection() {
        elSecondProductCardSearchResult.shouldNotBe(Condition.visible);
        elsProductCardsBox.shouldBe(CollectionCondition.sizeGreaterThan(0)).stream()
                .filter(gg -> gg.getText().contains("Apple iPhone 11 Pro Max"))
                .findFirst().orElseThrow(NoSuchElementException::new).find(By.xpath(".//following-sibling::*[contains(text(),'" + monthPay + "')]")).click();
        elSecondProductCardSearchResult.shouldBe(Condition.visible);
        return this;
    }

    ================================ –î–æ—Å—Ç—É–ø –∫ LocalStorage –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ RestAssured –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ===============================

   LocalStorage localStorage = ((WebStorage) WebDriverRunner.getWebDriver()).getLocalStorage();
   default String getCookieValue (String cookieItem) {
           RemoteExecuteMethod remoteExecuteMethod = new RemoteExecuteMethod((RemoteWebDriver) WebDriverRunner.getWebDriver());
           RemoteWebStorage remoteWebStorage = new RemoteWebStorage(remoteExecuteMethod);
           LocalStorage webStorage = remoteWebStorage.getLocalStorage();
           return remoteWebStorage.getLocalStorage().getItem(cookieItem);
       } //////////////////////////// –î–æ—Å—Ç—É–ø –∫ —É–¥–∞–ª—ë–Ω–Ω–æ–º—É LocalStorage

             String fwd_basketId = localStorage.getItem("fwd_basketId");
             String token = localStorage.getItem("auth-token");
             String userID = localStorage.getItem("fwd_usid");
             $x("//input[@name='email']").sendKeys("123@123.com");


             String applicationId = RestAssured
                     .given()
                     .contentType("application/json")
                     .header("auth-token", token)
                     .header("Forward", "{}")
                     .header("fwd_usid", userID)
                     .header("Device-Type", "")
                     .body(new HashMap(){{
                         put("agreementSimpleSign", true);
                         put("basketId",fwd_basketId);
                         put("email", "123@123.mail");
                         put("mobilePhone","1234567890");
                         put("previousApplicationId",null);
                         put("type","NEW");
                     }})
                     .when()
                     .post("https://agent-front-ag-test.forward.lc/application/v2/leasing-application")
                     .then()
                     .log().all()
                     .statusCode(200)
                     .extract().body().jsonPath().getString("resultData.applicationID")
                     ;

   –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ body() —á–µ—Ä–µ–∑ hashMap
   HashMap<String, Object> hashMap = new HashMap<>();
                     hashMap.put("agreementSimpleSign", true);
                     hashMap.put("basketId",fwd_basketId);
                     hashMap.put("email", "123@123.mail");
                     hashMap.put("mobilePhone","1234567890");
                     hashMap.put("previousApplicationId",null);
                     hashMap.put("type","NEW");
                     –∏ –≤ body –ø–µ—Ä–µ–¥–∞–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é hashmap


   ============================== –û—Ç–ø—Ä–∞–≤–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ RestAssured –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ===============================

           String qq = RestAssured
                   .given()
                   .spec(getRequestSpecification("https://agent-front-ag-test.forward.lc/"))
                   .basePath("leasing-basket/v1/basket-online/" + fwd_basketId)
                   .get()
                   .then()
                   .log().all()
                   .spec(getResponseSpecification()).extract().body()
                   .jsonPath()
                   .getString("resultData.basketInfo.referenceId")
           ;

================================= –ü—Ä–∏–º–µ—Ä —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –≤–µ–±-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π stream ===================================

    default SelenideElement getFirstMatchElement(ElementsCollection elementsCollection, String elementByText) {
       return elementsCollection.shouldBe(CollectionCondition.sizeGreaterThan(0)).stream()
                .filter(var -> var.shouldBe(Condition.visible).getText().contains(elementByText))
                .findFirst().orElseThrow(NoSuchElementException::new);
    }
    private ElementsCollection elsCartBlockItemInfo = $$x("//*[@style='display: block;']//*[@data-test='cart-block']//*[@class='basket-name']");
    getFirstMatchElement(elsVolumeRadioButtons, itemVolume).click();

            getFirstMatchElement(elsCartBlockItemInfo, "–¶–≤–µ—Ç")
                    .$x(".//following-sibling::*[contains(text(),'" + itemColor + "')]")
                    .shouldBe(Condition.visible);



================================ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ =================================================
    default String generateMobilePhone() {
        return "9".concat(RandomStringUtils.randomNumeric(9));
    }

    import org.apache.commons.text.RandomStringGenerator;
        default String generateMobilePhone() {
            return new RandomStringGenerator.Builder().withinRange('0', '9')
                    .usingRandom()
                    .build().generate(9);
        }

    default String generateMobilePhone() {
            return new StringBuilder().append(9).append(RandomStringUtils.randomNumeric(9)).toString();
        }


================================================= –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Jenkins ================================================
pipeline {
    agent any
    environment {
        fwdRepo = 'ssh://git@bitbucket.org/forwardleasing/qa-friends-front.git'
    }
    stages {
        stage('checkout repository') {
            steps {
                git url: env.fwdRepo
            }
        }
        stage('Run Test') {
            steps {
                catchError {
                    sh 'gradle clean test --debug'
                }
            }
        }
        stage('Report') {
            steps {
                echo 'Reporting..'
                allure([
                         includeProperties: false,
                         jdk: '',
                         reportBuildPolicy: 'ALWAYS',
                         results: [[path: 'build/allure-results']]
                         ])
            }
        }
    }
    post {
        success {
            slackSend (color: 'good', message: '‚úÖ  Test qa-friends-front ended successfully ü§©')
        }
        failure {
            slackSend (color: 'bad',  message: '‚õîÔ∏è Test qa-friends-front ended UNsuccessfully ü§¨')
        }

    }
}

================================================= –û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ ================================================
    @Step("I open new tab in browser with URL {URL}")
    public OrderPage openNewTabInBrowserWithUrl(String url) {
        executeJavaScript("window.open('"+ url +"','_blank');");
        return this;
    }

    closeWindow();
    switchTo().window(0);
    open();

    ================================================= –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è Selenide ================================================

    new WebDriverWait(WebDriverRunner.getWebDriver(), 2).until(elsActNumberColumnValues.exclude());

    ================================================= –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é ================================================

     @Step("I check client column matches regex")
        public MainPageContracts checkClientColumnMatchesRegex() {
            for (SelenideElement el : elsClientColumnValues) {
                el.shouldHave(Condition.matchText("^[–ê-–Ø–∞-—è]+ [–ê-–Ø–∞-—è]{1}[*]+[–ê-–Ø–∞-—è]{1} \\d+[*]+\\d+$"));
            }
            return this;
        }